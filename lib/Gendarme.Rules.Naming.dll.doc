<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gendarme.Rules.Naming</name>
    </assembly>
    <members>
        <member name="T:Gendarme.Rules.Naming.AvoidDeepNamespaceHierarchyRule">
            <summary>
            This rule checks for deeply nested namespaces within an assembly. It will
            warn if the depth is greater than four (default value) unless the fifth (or the
            next) part is one of the specialized name that the framework recommends or a
            name like an internal namespace (something not meant to be seen outside the assembly).
            <list><item><term>Design</term><description>Namespace that provides design-time
            support for its base namespace.</description></item><item><term>Interop</term><description>Namespace that provides all interoperability
            code (e.g. p./invokes) for its base namespace.</description></item><item><term>Permissions</term><description>Namespace that provides all custom
            permissions for its base namespace.</description></item><item><term>Internal</term><description>Namespace that provides non visible (outside
            the assembly) helper code for its base namespace. <c>Impl</c> while allowed by the
            rule is not encouraged.
            </description></item></list></summary>
            <example>
            Bad example:
            <code>
            namespace One.Two.Three.Four.Five {
            	internal class Helper {
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            namespace One.Two.Three.Four {
            	internal class FiveHelper {
            	}
            }
            </code></example>
            <example>
            Good example (exception for some namespace specialization):
            <code>
            namespace One.Two.Three.Four.Internal {
            	internal class Helper {
            	}
            }
            </code></example>
        </member>
        <member name="P:Gendarme.Rules.Naming.AvoidDeepNamespaceHierarchyRule.MaxDepth">
            <summary>The depth at which namespaces may be nested without triggering a defect.</summary>
            <remarks>Defaults to 4.</remarks>
        </member>
        <member name="T:Gendarme.Rules.Naming.AvoidRedundancyInMethodNameRule">
            <summary>
            This rule will fire if a method name embeds the type name of its first parameter.
            Usually, removing that type name makes the API less
            verbose, easier to learn, and more future-proof.
            </summary>
            <example>
            Bad example:
            <code>
            class PostOffice {
            	public void SendLetter (Letter letter) {
            	}
            	public void SendPackage (Package package) {
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            class PostOffice {
            	public void Send (Letter letter) {
            	}
            	public void Send (Package package) {
            	}
            }
            </code></example>
            <example>
            Bad example:
            <code>
            class PostOffice {
            	public static bool IsPackageValid (Package package) {
            		return package.HasAddress &amp;&amp; package.HasStamp;
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            class Package {
            	public bool IsValid {
            		get {
            			return HasAddress &amp;&amp; HasStamp;
            		}
            	}
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.AvoidRedundancyInTypeNameRule">
            <summary>
            This rule will fire if a type is prefixed with the last component of its namespace.
            Using prefixes like this makes type names more verbose than they need to be
            and makes them harder to use with tools like auto-complete. Note that an
            exception is made if removal of the prefix would cause an ambiguity with another
            type. If this is the case the rule will not report a defect.
            </summary>
            <example>
            Bad example:
            <code>
            namespace Foo.Lang.Compiler {
            	public class CompilerContext {
            	}
            }
            </code><code>
            using Foo.Lang;
            ...
            Compiler.CompilerContext context = new Compiler.CompilerContext ();
            </code><code>
            using Foo.Lang.Compiler;
            ...
            CompilerContext context = new CompilerContext ();
            </code></example>
            <example>
            Good example:
            <code>
            namespace Foo.Lang.Compiler {
            	public class Context {
            	}
            }
            </code><code>
            using Foo.Lang;
            ...
            Compiler.Context context = new Compiler.Context ();
            </code><code>
            using Foo.Lang.Compiler;
            ...
            Context context = new Context ();
            </code></example>
            <example>
            Another good example (more meaningful term in the context of the namespace):
            <code>
            namespace Foo.Lang.Compiler {
            	public class CompilationContext {
            	}
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.AvoidTypeInterfaceInconsistencyRule">
            <summary>
            This rule will fire if an assembly has a namespace which contains an interface IFoo
            and a type Foo, but the type does not implement the interface. If an interface and
            a type name differ only by the <c>I</c> prefix (of the interface) then we can
            logically expect the type to implement this interface.
            </summary>
            <example>
            Bad example:
            <code>
            public interface IMember {
            	string Name {
            		get;
            	}
            }
            public class Member {
            	public string Name {
            		get {
            			return String.Empty;
            		}
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            public interface IMember {
            	string Name {
            		get;
            	}
            }
            public class Member : IMember {
            	public string Name {
            		get {
            			return String.Empty;
            		}
            	}
            }
            </code></example>
            <remarks>This rule is available since Gendarme 2.4</remarks>
        </member>
        <member name="T:Gendarme.Rules.Naming.AvoidNonAlphanumericIdentifierRule">
            <summary>
            This rule ensures that identifiers like assembly names, namespaces, types and
            members names don't have any non-alphanumerical characters inside them. The rule
            will ignore interfaces used for COM interoperability - i.e. decorated with both
            <c>[InterfaceType]</c> and <c>[Guid]</c> attributes.
            </summary>
            <example>
            Bad example:
            <code>
            namespace New_Namespace {
            	public class My_Custom_Class {
            		public int My_Field;
            		public void My_Method (string my_string)
            		{
            		}
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            namespace NewNamespace {
            	public class MyCustomClass {
            		public int MyField;
            		public void MyMethod (string myString)
            		{
            		}
            	}
            }
            </code></example>
            <remarks>Prior to Gendarme 2.2 this rule was named DetectNonAlphanumericInTypeNamesRule</remarks>
        </member>
        <member name="T:Gendarme.Rules.Naming.DoNotPrefixEventsWithAfterOrBeforeRule">
            <summary>
            This rule ensures that event names are not prefixed with <c>After</c> or <c>Before</c>.
            The .NET naming conventions recommend using a verb in the present and in
            the past tense.
            </summary>
            <example>
            Bad example:
            <code>
            public class Bad {
            	public event ResolveEventHandler BeforeResolve;
            	public event ResolveEventHandler AfterResolve;
            }
            </code></example>
            <example>
            Good example:
            <code>
            public class Good {
            	public event ResolveEventHandler Resolving;	// present
            	public event ResolveEventHandler Resolved;	// past
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.DoNotPrefixValuesWithEnumNameRule">
            <summary>
            This rule checks for <c>enum</c> values that are prefixed with the enumeration type
            name. This is typical in C/C++ application but unneeded in .NET since the <c>enum</c>
            type name must be specified anyway when used.
            </summary>
            <example>
            Bad example:
            <code>
            public enum Answer {
            	AnswerYes,
            	AnswerNo,
            	AnswerMaybe,
            }
            </code></example>
            <example>
            Good example:
            <code>
            public enum Answer {
            	Yes,
            	No,
            	Maybe
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.DoNotUseReservedInEnumValueNamesRule">
            <summary>
            This rule checks for enumerations that contain values named <c>reserved</c>. This
            practice, often seen in C/C++ sources, is not needed in .NET since adding new
            values will not normally break binary compatibility. However renaming a <c>reserved</c>
            enum value can since there is no way to prevent people from using the old value.
            </summary>
            <example>
            Bad example:
            <code>
            public enum Answer {
            	Yes,
            	No,
            	Reserved
            	// ^ renaming this to 'Maybe' would be a breaking change
            }
            </code></example>
            <example>
            Good example:
            <code>
            public enum Answer {
            	Yes,
            	No
            	// we can add Maybe here without causing a breaking change
            	// (but note that we may break code if we change the values of
            	// existing enumerations)
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.ParameterNamesShouldMatchOverriddenMethodRule">
            <summary>
            This rule warns if an overriden method's parameter names does not match those of the
            base class or those of the implemented interface. This can be confusing because it may
            not always be clear that it is an override or implementation of an interface method. It
            also makes it more difficult to use the method with languages that support named
            parameters (like C# 4.0).
            </summary>
            <example>
            Bad example:
            <code>
            public class Base {
            	public abstract void Write (string text);
            }
            public class SubType : Base {
            	public override void Write (string output)
            	{
            		//...
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            public class Base {
            	public abstract void Write (string text);
            }
            class SubType : Base {
            	public override void Write (string text)
            	{
            		//...
            	}
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.UseCorrectCasingRule">
            <summary>
            This rule ensures that identifiers are correctly cased. In particular:
            <list><item><description>namespace names are PascalCased</description></item><item><description>type names are PascalCased</description></item><item><description>method names are PascalCased</description></item><item><description>parameter names are camelCased</description></item></list></summary>
            <example>
            Bad example:
            <code>
            namespace A {
            	abstract public class myClass {
            		abstract public int thisMethod (int ThatParameter);
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            namespace Company.Product.Technology {
            	abstract public class MyClass {
            		abstract public int ThisMethod (int thatParameter);
            	}
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.UseCorrectPrefixRule">
            <summary>
            This rule ensures that types are prefixed correctly. Interfaces should always be prefixed
            with a <c>I</c>, types should never be prefixed with a <c>C</c> (reminder for MFC folks)
            and generic parameters should be a single, uppercased letter or be prefixed with <c>T</c>.
            </summary>
            <example>
            Bad examples:
            <code>
            public interface Phone {
            	// ...
            }
            public class CPhone : Phone {
            	// ...
            }
            public class Call&lt;Mechanism&gt; {
            	// ...
            }
            </code></example>
            <example>
            Good examples:
            <code>
            public interface IPhone {
            	// ...
            }
            public class Phone : IPhone {
            	// ...
            }
            public class Call&lt;TMechanism&gt; {
            	// ...
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.UseCorrectSuffixRule">
            <summary>
            This rule ensure that types that inherit from certain types or implement certain interfaces
            have a specific suffix. It also ensures that no other
            types are using those suffixes without inheriting/implementing the types/interfaces. E.g.
            <list><item><description><c>System.Attribute</c> should end with <c>Attribute</c></description></item><item><description><c>System.EventArgs</c> should end with <c>EventArgs</c></description></item><item><description><c>System.Exception</c> should end with <c>Exception</c></description></item><item><description><c>System.Collections.Queue</c> should end with <c>Collection</c> or <c>Queue</c></description></item><item><description><c>System.Collections.Stack</c> should end with <c>Collection</c> or <c>Stack</c></description></item><item><description><c>System.Data.DataSet</c> should end with <c>DataSet</c></description></item><item><description><c>System.Data.DataTable</c> should end with <c>DataTable</c> or <c>Collection</c></description></item><item><description><c>System.IO.Stream</c> should end with <c>Stream</c></description></item><item><description><c>System.Security.IPermission</c> should end with <c>Permission</c></description></item><item><description><c>System.Security.Policy.IMembershipCondition</c> should end with <c>Condition</c></description></item><item><description><c>System.Collections.IDictionary</c> or <c>System.Collections.Generic.IDictionary</c> should end with <c>Dictionary</c></description></item><item><description><c>System.Collections.ICollection</c>, <c>System.Collections.Generic.ICollection</c> or <c>System.Collections.IEnumerable</c> should end with <c>Collection</c></description></item></list></summary>
            <example>
            Bad example:
            <code>
            public sealed class SpecialCode : Attribute {
            	// ...
            }
            </code></example>
            <example>
            Good example:
            <code>
            public sealed class SpecialCodeAttribute : Attribute {
            	// ...
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.UsePluralNameInEnumFlagsRule">
            <summary>
            This rule ensures that the name of enumerations decorated with FlagsAttribute are
            in plural form.
            </summary>
            <example>
            Bad example:
            <code>
            [Flags]
            public enum MyCustomValue {
            	Foo,
            	Bar,
            	AllValues = Foo | Bar
            }
            </code></example>
            <example>
            Good example:
            <code>
            [Flags]
            public enum MyCustomValues {
            	Foo,
            	Bar,
            	AllValues = Foo | Bar
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.UsePreferredTermsRule">
            <summary>
            This rule ensures that identifiers such as assemblies, namespaces, types, and members,
            use the terms suggested by the .NET framework guidelines so that they are consistent
            with other class libraries.
            <list><item><description><c>Arent</c> should be replaced with <c>AreNot</c>;</description></item><item><description><c>Cancelled</c> should be replaced with <c>Canceled</c>;</description></item><item><description><c>Cant</c> should be replaced with <c>Cannot</c>;</description></item><item><description><c>ComPlus</c> should be replaced with <c>EnterpriseServices</c>;</description></item><item><description><c>Couldnt</c> should be replaced with <c>CouldNot</c>;</description></item><item><description><c>Didnt</c> should be replaced with <c>DidNot</c>;</description></item><item><description><c>Doesnt</c> should be replaced with <c>DoesNot</c>;</description></item><item><description><c>Dont</c> should be replaced with <c>DoNot</c>;</description></item><item><description><c>Hadnt</c> should be replaced with <c>HadNot</c>;</description></item><item><description><c>Hasnt</c> should be replaced with <c>HasNot</c>;</description></item><item><description><c>Havent</c> should be replaced with <c>HaveNot</c>;</description></item><item><description><c>Indices</c> should be replaced with <c>Indexes</c>;</description></item><item><description><c>Isnt</c> should be replaced with <c>IsNot</c>;</description></item><item><description><c>LogIn</c> should be replaced with <c>LogOn</c>;</description></item><item><description><c>LogOut</c> should be replaced with <c>LogOff</c>;</description></item><item><description><c>Shouldnt</c> should be replaced with <c>ShouldNot</c>;</description></item><item><description><c>SignOn</c> should be replaced with <c>SignIn</c>;</description></item><item><description><c>SignOff</c> should be replaced with <c>SignOut</c>;</description></item><item><description><c>Wasnt</c> should be replaced with <c>WasNot</c>;</description></item><item><description><c>Werent</c> should be replaced with <c>WereNot</c>;</description></item><item><description><c>Wont</c> should be replaced with <c>WillNot</c>;</description></item><item><description><c>Wouldnt</c> should be replaced with <c>WouldNot</c>;</description></item><item><description><c>Writeable</c> should be replaced with <c>Writable</c>;</description></item></list></summary>
            <example>
            Bad example:
            <code>
            abstract public class ComPlusSecurity {
            	abstract public void LogIn ();
            	abstract public void LogOut ();
            }
            </code></example>
            <example>
            Good example:
            <code>
            abstract public class EnterpriseServicesSecurity {
            	abstract public void LogOn ();
            	abstract public void LogOff ();
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.Naming.UseSingularNameInEnumsUnlessAreFlagsRule">
            <summary>
            The rule is used for ensure that the name of enumerations are in singular form unless
            the enumeration is used as flags, i.e. decorated with the <c>[Flags]</c> attribute.
            </summary>
            <example>
            Bad example:
            <code>
            public enum MyCustomValues {
            	Foo,
            	Bar
            }
            </code></example>
            <example>
            Good example (singular):
            <code>
            public enum MyCustomValue {
            	Foo,
            	Bar
            }
            </code></example>
            <example>
            Good example (flags):
            <code>
            [Flags]
            public enum MyCustomValues {
            	Foo,
            	Bar,
            	AllValues = Foo | Bar
            }
            </code></example>
        </member>
    </members>
</doc>
