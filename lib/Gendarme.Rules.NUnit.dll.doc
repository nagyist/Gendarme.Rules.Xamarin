<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gendarme.Rules.NUnit</name>
    </assembly>
    <members>
        <member name="T:Gendarme.Rules.NUnit.NUnitRocks">
            <summary>
            NUnitRocks contains extensions methods for NUnit-related methods and types.
            </summary>
        </member>
        <member name="M:Gendarme.Rules.NUnit.NUnitRocks.IsTest(Mono.Cecil.ICustomAttributeProvider)">
            <summary>
            Checks if the method is a valid unit test (has corresponding attribute).
            </summary>
            <param name="self">The ICustomAttributeProvider on which the extension method can be called.</param>
            <returns>True if method is a unit test, false otherwise.</returns>
        </member>
        <member name="T:Gendarme.Rules.NUnit.ProvideMessageOnAssertCallsRule">
            <summary>
            This rule checks that all Assert.* methods are calling with 'message'
            parameter, which helps to easily identify failing test.
            </summary>
            <example>
            Bad example:
            <code>
            [Test]
            public void TestThings ()
            {
            	Assert.AreEqual(10, 20);
            	Assert.AreEqual(30, 40);
            }
            </code></example>
            <example>
            Good example:
            <code>
            [Test]
            public void TestThings ()
            {
            	Assert.AreEqual(10, 20, "10 equal to 20 test");
            	Assert.AreEqual(30, 40, "30 equal to 40 test");
            </code></example>
            <remarks>
            This rule will not report any problems if only one Assert.* call was made
            inside a method, because it's easy to identify failing test in this case.</remarks>
        </member>
        <member name="T:Gendarme.Rules.NUnit.TestMethodsMustBePublicRule">
            <summary>
            Test method (a method, marked with either TestAttribute, TestCaseAttribute
            or TestCaseSourceAttribute) is not public. Most NUnit test runners won't
            execute non-public unit tests.
            </summary>
            <example>
            Bad example:
            <code>
            [Test]
            private void TestMethod ()
            {
            	Assert.AreEqual (10, 20);
            }
            </code></example>
            <example>
            Good example:
            <code>
            public void TestMethod ()
            {
            	Assert.AreEqual (10, 20);
            }
            </code></example>
        </member>
        <member name="T:Gendarme.Rules.NUnit.UnitTestsMissingTestFixtureRule">
            <summary>
            This rule checks that all types which have methods with TestAttribute, TestCaseAttribute
            or TestCaseSourceAttribute are marked with the TestFixtureAttribute. NUnit &lt; 2.5 will not run
            tests located in types without TestFixtureAttribute.
            </summary>
            <example>
            Bad example:
            <code>
            class Test {
            	[Test]
            	public void TestMethod ()
            	{
            		Assert.AreEqual (0, 0);
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            [TestFixture]
            class Test {
            	[Test]
            	public void TestMethod ()
            	{
            		Assert.AreEqual (0, 0);
            	}
            }
            </code></example>
        </member>
    </members>
</doc>
