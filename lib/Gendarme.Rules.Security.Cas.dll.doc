<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gendarme.Rules.Security.Cas</name>
    </assembly>
    <members>
        <member name="T:Gendarme.Rules.Security.Cas.AddMissingTypeInheritanceDemandRule">
            <summary>
            The rule checks for types that are not <c>sealed</c> but have a <c>LinkDemand</c>.
            In this case the type should also have an <c>InheritanceDemand</c> for the same
            permissions. An alternative is to seal the type.
            </summary>
            <example>
            Bad example:
            <code>
            [SecurityPermission (SecurityAction.LinkDemand, ControlThread = true)]
            public class Bad {
            }
            </code></example>
            <example>
            Good example (InheritanceDemand):
            <code>
            [SecurityPermission (SecurityAction.LinkDemand, ControlThread = true)]
            [SecurityPermission (SecurityAction.InheritanceDemand, ControlThread = true)]
            public class Correct {
            }
            </code></example>
            <example>
            Good example (sealed):
            <code>
            [SecurityPermission (SecurityAction.LinkDemand, ControlThread = true)]
            public sealed class Correct {
            }
            </code></example>
            <remarks>Before Gendarme 2.2 this rule was part of Gendarme.Rules.Security and named TypeLinkDemandRule.</remarks>
        </member>
        <member name="T:Gendarme.Rules.Security.Cas.DoNotExposeFieldsInSecuredTypeRule">
            <summary>
            The rule checks for types that are secured by <c>Demand</c> or <c>LinkDemand</c>
            but also expose visible fields. Access to these fields is not covered by the
            declarative demands, opening potential security holes.
            </summary>
            <example>
            Bad example:
            <code>
            [SecurityPermission (SecurityAction.LinkDemand, ControlThread = true)]
            public class Bad {
            }
            </code></example>
            <example>
            Good example (InheritanceDemand):
            <code>
            [SecurityPermission (SecurityAction.LinkDemand, ControlThread = true)]
            [SecurityPermission (SecurityAction.InheritanceDemand, ControlThread = true)]
            public class Correct {
            }
            </code></example>
            <example>
            Good example (sealed):
            <code>
            [SecurityPermission (SecurityAction.LinkDemand, ControlThread = true)]
            public sealed class Correct {
            }
            </code></example>
            <remarks>Before Gendarme 2.2 this rule was part of Gendarme.Rules.Security and named TypeExposeFieldsRule.</remarks>
        </member>
        <member name="T:Gendarme.Rules.Security.Cas.DoNotExposeMethodsProtectedByLinkDemandRule">
            <summary>
            This rule checks for visible methods that are less protected (i.e. lower security
            requirements) than the method they call. If the called methods are protected by a
            <c>LinkDemand</c> then the caller can be used to bypass security checks.
            </summary>
            <example>
            Bad example:
            <code>
            public class BaseClass {
            	[SecurityPermission (SecurityAction.LinkDemand, Unrestricted = true)]
            	public virtual void VirtualMethod ()
            	{
            	}
            }
            public class Class : BaseClass  {
            	// bad since a caller with only ControlAppDomain will be able to call the base method
            	[SecurityPermission (SecurityAction.LinkDemand, ControlAppDomain = true)]
            	public override void VirtualMethod ()
            	{
            		base.VirtualMethod ();
            	}
            }
            </code></example>
            <example>
            Good example (InheritanceDemand):
            <code>
            public class BaseClass {
            	[SecurityPermission (SecurityAction.LinkDemand, ControlAppDomain = true)]
            	public virtual void VirtualMethod ()
            	{
            	}
            }
            public class Class : BaseClass  {
            	// ok since this permission cover the base class permission
            	[SecurityPermission (SecurityAction.LinkDemand, Unrestricted = true)]
            	public override void VirtualMethod ()
            	{
            		base.VirtualMethod ();
            	}
            }
            </code></example>
            <remarks>Before Gendarme 2.2 this rule was part of Gendarme.Rules.Security and named MethodCallWithSubsetLinkDemandRule.</remarks>
        </member>
        <member name="T:Gendarme.Rules.Security.Cas.DoNotReduceTypeSecurityOnMethodsRule">
            <summary>
            This rule checks for types that have declarative security permission which aren't a
            subset of the security permission of some of their methods.
            </summary>
            <example>
            Bad example:
            <code>
            [SecurityPermission (SecurityAction.Assert, ControlThread = true)]
            public class NotSubset {
            	[EnvironmentPermission (SecurityAction.Assert, Unrestricted = true)]
            	public void Method ()
            	{
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            [SecurityPermission (SecurityAction.Assert, ControlThread = true)]
            public class Subset {
            	[SecurityPermission (SecurityAction.Assert, Unrestricted = true)]
            	public void Method ()
            	{
            	}
            }
            </code></example>
            <remarks>Before Gendarme 2.2 this rule was part of Gendarme.Rules.Security and named TypeIsNotSubsetOfMethodSecurityRule.</remarks>
        </member>
        <member name="T:Gendarme.Rules.Security.Cas.ReviewSealedTypeWithInheritanceDemandRule">
            <summary>
            This rule checks for sealed types that have <c>InheritanceDemand</c> declarative
            security applied to them. Since those types cannot be inherited from the
            <c>InheritanceDemand</c> will never be executed by the runtime. Check if the permission
            is required and, if so, change the <c>SecurityAction</c> to the correct one. Otherwise
            remove the permission.
            </summary>
            <example>
            Bad example:
            <code>
            [SecurityPermission (SecurityAction.InheritanceDemand, Unrestricted = true)]
            public sealed class Bad {
            }
            </code></example>
            <example>
            Good example (non sealed):
            <code>
            [SecurityPermission (SecurityAction.InheritanceDemand, Unrestricted = true)]
            public class Good {
            }
            </code></example>
            <example>
            Good example (LinkDemand):
            <code>
            [SecurityPermission (SecurityAction.LinkDemand, Unrestricted = true)]
            public sealed class Good {
            }
            </code></example>
            <remarks>Before Gendarme 2.2 this rule was part of Gendarme.Rules.Security and named SealedTypeWithInheritanceDemandRule.</remarks>
        </member>
        <member name="T:Gendarme.Rules.Security.Cas.ReviewSuppressUnmanagedCodeSecurityUsageRule">
            <summary>
            This rule fires if a type or method is decorated with the <c>[SuppressUnmanagedCodeSecurity]</c>
            attribute. This attribute reduces the security checks done when executing unmanaged code and its
            usage should be reviewed to confirm that no exploitable security holes are present.
            </summary>
            <example>
            Example:
            <code>
            [SuppressUnmanagedCodeSecurity]
            public class Safe {
            	[DllImport ("User32.dll")]
            	static extern Boolean MessageBeep (UInt32 beepType);
            }
            </code></example>
            <remarks>This is an Audit rule. As such it does not check for valid or invalid patterns but warns about a specific problem that needs to be reviewed by someone.</remarks>
        </member>
        <member name="T:Gendarme.Rules.Security.Cas.SecureGetObjectDataOverridesRule">
            <summary>
            This rule fires if a type implements <c>System.Runtime.Serialization.ISerializable</c>
            but the <c>GetObjectData</c> method is not protected with a <c>Demand</c> or
            <c>LinkDemand</c> for <c>SerializationFormatter</c>.
            </summary>
            <example>
            Bad example:
            <code>
            public class Bad : ISerializable {
            	public override void GetObjectData (SerializationInfo info, StreamingContext context)
            	{
            	}
            }
            </code></example>
            <example>
            Good example:
            <code>
            public class Good : ISerializable {
            	[SecurityPermission (SecurityAction.LinkDemand, SerializationFormatter = true)]
            	public override void GetObjectData (SerializationInfo info, StreamingContext context)
            	{
            	}
            }
            </code></example>
            <remarks>Before Gendarme 2.2 this rule was part of Gendarme.Rules.Security.</remarks>
        </member>
    </members>
</doc>
